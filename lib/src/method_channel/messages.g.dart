// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

/// Describes the type of map to construct.
enum MapViewTypeDto {
  /// Navigation view supports navigation overlay, and current navigation session is displayed on the map.
  navigation,

  /// Classic map view, without navigation overlay.
  map,
}

/// Determines the initial visibility of the navigation UI on map initialization.
enum NavigationUIEnabledPreferenceDto {
  /// Navigation UI gets enabled if the navigation
  /// session has already been successfully started.
  automatic,

  /// Navigation UI is disabled.
  disabled,
}

enum MapTypeDto { none, normal, satellite, terrain, hybrid }

enum CameraPerspectiveDto { tilted, topDownHeadingUp, topDownNorthUp }

enum MarkerEventTypeDto {
  clicked,
  infoWindowClicked,
  infoWindowClosed,
  infoWindowLongClicked,
}

enum MarkerDragEventTypeDto { drag, dragStart, dragEnd }

enum StrokeJointTypeDto { bevel, defaultJoint, round }

enum PatternTypeDto { dash, dot, gap }

enum CameraEventTypeDto {
  moveStartedByApi,
  moveStartedByGesture,
  onCameraMove,
  onCameraIdle,
  onCameraStartedFollowingLocation,
  onCameraStoppedFollowingLocation,
}

enum AlternateRoutesStrategyDto { all, none, one }

enum RoutingStrategyDto { defaultBest, deltaToTargetDistance, shorter }

enum TravelModeDto { driving, cycling, walking, twoWheeler, taxi }

enum RouteStatusDto {
  internalError,
  statusOk,
  routeNotFound,
  networkError,
  quotaExceeded,
  apiKeyNotAuthorized,
  statusCanceled,
  duplicateWaypointsError,
  noWaypointsError,
  locationUnavailable,
  waypointError,
  travelModeUnsupported,
  locationUnknown,
  quotaCheckFailed,
  unknown,
}

enum AudioGuidanceTypeDto { silent, alertsOnly, alertsAndGuidance }

enum SpeedAlertSeverityDto { unknown, notSpeeding, minor, major }

enum RouteSegmentTrafficDataStatusDto { ok, unavailable }

enum RouteSegmentTrafficDataRoadStretchRenderingDataStyleDto {
  unknown,
  slowerTraffic,
  trafficJam,
}

/// A set of values that specify the navigation action to take.
enum ManeuverDto {
  /// Arrival at a destination.
  destination,

  /// Starting point of the maneuver.
  depart,

  /// Arrival at a destination located on the left side of the road.
  destinationLeft,

  /// Arrival at a destination located on the right side of the road.
  destinationRight,

  /// Take the boat ferry.
  ferryBoat,

  /// Take the train ferry.
  ferryTrain,

  /// Current road joins another road slightly on the left.
  forkLeft,

  /// Current road joins another road slightly on the right.
  forkRight,

  /// Current road joins another on the left.
  mergeLeft,

  /// Current road joins another on the right.
  mergeRight,

  /// Current road joins another.
  mergeUnspecified,

  /// The street name changes.
  nameChange,

  /// Keep to the left side of the road when exiting a turnpike or freeway as the road diverges.
  offRampKeepLeft,

  /// Keep to the right side of the road when exiting a turnpike or freeway as the road diverges.
  offRampKeepRight,

  /// Regular left turn to exit a turnpike or freeway.
  offRampLeft,

  /// Regular right turn to exit a turnpike or freeway.
  offRampRight,

  /// Sharp left turn to exit a turnpike or freeway.
  offRampSharpLeft,

  /// Sharp right turn to exit a turnpike or freeway.
  offRampSharpRight,

  /// Slight left turn to exit a turnpike or freeway.
  offRampSlightLeft,

  /// Slight right turn to exit a turnpike or freeway.
  offRampSlightRight,

  /// Exit a turnpike or freeway.
  offRampUnspecified,

  /// Clockwise turn onto the opposite side of the street to exit a turnpike or freeway.
  offRampUTurnClockwise,

  /// Counterclockwise turn onto the opposite side of the street to exit a turnpike or freeway.
  offRampUTurnCounterclockwise,

  /// Keep to the left side of the road when entering a turnpike or freeway as the road diverges.
  onRampKeepLeft,

  /// Keep to the right side of the road when entering a turnpike or freeway as the road diverges.
  onRampKeepRight,

  /// Regular left turn to enter a turnpike or freeway.
  onRampLeft,

  /// Regular right turn to enter a turnpike or freeway.
  onRampRight,

  /// Sharp left turn to enter a turnpike or freeway.
  onRampSharpLeft,

  /// Sharp right turn to enter a turnpike or freeway.
  onRampSharpRight,

  /// Slight left turn to enter a turnpike or freeway.
  onRampSlightLeft,

  /// Slight right turn to enter a turnpike or freeway.
  onRampSlightRight,

  /// Enter a turnpike or freeway.
  onRampUnspecified,

  /// Clockwise turn onto the opposite side of the street to enter a turnpike or freeway.
  onRampUTurnClockwise,

  /// Counterclockwise turn onto the opposite side of the street to enter a turnpike or freeway.
  onRampUTurnCounterclockwise,

  /// Enter a roundabout in the clockwise direction.
  roundaboutClockwise,

  /// Enter a roundabout in the counterclockwise direction.
  roundaboutCounterclockwise,

  /// Exit a roundabout in the clockwise direction.
  roundaboutExitClockwise,

  /// Exit a roundabout in the counterclockwise direction.
  roundaboutExitCounterclockwise,

  /// Enter a roundabout in the clockwise direction and turn left.
  roundaboutLeftClockwise,

  /// Enter a roundabout in the counterclockwise direction and turn left.
  roundaboutLeftCounterclockwise,

  /// Enter a roundabout in the clockwise direction and turn right.
  roundaboutRightClockwise,

  /// Enter a roundabout in the counterclockwise direction and turn right.
  roundaboutRightCounterclockwise,

  /// Enter a roundabout in the clockwise direction and turn sharply to the left.
  roundaboutSharpLeftClockwise,

  /// Enter a roundabout in the counterclockwise direction and turn sharply to the left.
  roundaboutSharpLeftCounterclockwise,

  /// Enter a roundabout in the clockwise direction and turn sharply to the right.
  roundaboutSharpRightClockwise,

  /// Enter a roundabout in the counterclockwise direction and turn sharply to the right.
  roundaboutSharpRightCounterclockwise,

  /// Enter a roundabout in the clockwise direction and turn slightly left.
  roundaboutSlightLeftClockwise,

  /// Enter a roundabout in the counterclockwise direction and turn slightly to the left.
  roundaboutSlightLeftCounterclockwise,

  /// Enter a roundabout in the clockwise direction and turn slightly to the right.
  roundaboutSlightRightClockwise,

  /// Enter a roundabout in the counterclockwise direction and turn slightly to the right.
  roundaboutSlightRightCounterclockwise,

  /// Enter a roundabout in the clockwise direction and continue straight.
  roundaboutStraightClockwise,

  /// Enter a roundabout in the counterclockwise direction and continue straight.
  roundaboutStraightCounterclockwise,

  /// Enter a roundabout in the clockwise direction and turn clockwise onto the opposite side of the street.
  roundaboutUTurnClockwise,

  /// Enter a roundabout in the counterclockwise direction and turn counterclockwise onto the opposite side of the street.
  roundaboutUTurnCounterclockwise,

  /// Continue straight.
  straight,

  /// Keep left as the road diverges.
  turnKeepLeft,

  /// Keep right as the road diverges.
  turnKeepRight,

  /// Regular left turn at an intersection.
  turnLeft,

  /// Regular right turn at an intersection.
  turnRight,

  /// Sharp left turn at an intersection.
  turnSharpLeft,

  /// Sharp right turn at an intersection.
  turnSharpRight,

  /// Slight left turn at an intersection.
  turnSlightLeft,

  /// Slight right turn at an intersection.
  turnSlightRight,

  /// Clockwise turn onto the opposite side of the street.
  turnUTurnClockwise,

  /// Counterclockwise turn onto the opposite side of the street.
  turnUTurnCounterclockwise,

  /// Unknown maneuver.
  unknown,
}

/// Whether this step is on a drive-on-right or drive-on-left route.
enum DrivingSideDto {
  /// Drive-on-left side.
  left,

  /// Unspecified side.
  none,

  /// Drive-on-right side.
  right,
}

/// The state of navigation.
enum NavStateDto {
  /// Actively navigating.
  enroute,

  /// Actively navigating but searching for a new route.
  rerouting,

  /// Navigation has ended.
  stopped,

  /// Error or unspecified state.
  unknown,
}

/// A set of values that specify the shape of the road path continuing from the Lane.
enum LaneShapeDto {
  /// Normal left turn (45-135 degrees).
  normalLeft,

  /// Normal right turn (45-135 degrees).
  normalRight,

  /// Sharp left turn (135-175 degrees).
  sharpLeft,

  /// Sharp right turn (135-175 degrees).
  sharpRight,

  /// Slight left turn (10-45 degrees).
  slightLeft,

  /// Slight right turn (10-45 degrees).
  slightRight,

  /// No turn.
  straight,

  /// Shape is unknown.
  unknown,

  /// A left turn onto the opposite side of the same street (175-180 degrees).
  uTurnLeft,

  /// A right turn onto the opposite side of the same street (175-180 degrees).
  uTurnRight,
}

/// Determines how application should behave when a application task is removed.
enum TaskRemovedBehaviorDto {
  /// The default state, indicating that navigation guidance,
  /// location updates, and notification should persist after user removes the application task.
  continueService,

  /// Indicates that navigation guidance, location updates, and notification should shut down immediately when the user removes the application task.
  quitService,
}

/// Object containing map options used to initialize Google Map view.
class MapOptionsDto {
  MapOptionsDto({
    required this.cameraPosition,
    required this.mapType,
    required this.compassEnabled,
    required this.rotateGesturesEnabled,
    required this.scrollGesturesEnabled,
    required this.tiltGesturesEnabled,
    required this.zoomGesturesEnabled,
    required this.scrollGesturesEnabledDuringRotateOrZoom,
    required this.mapToolbarEnabled,
    this.minZoomPreference,
    this.maxZoomPreference,
    required this.zoomControlsEnabled,
    this.cameraTargetBounds,
    this.padding,
  });

  /// The initial positioning of the camera in the map view.
  CameraPositionDto cameraPosition;

  /// The type of map to display (e.g., satellite, terrain, hybrid, etc.).
  MapTypeDto mapType;

  /// If true, enables the compass.
  bool compassEnabled;

  /// If true, enables the rotation gestures.
  bool rotateGesturesEnabled;

  /// If true, enables the scroll gestures.
  bool scrollGesturesEnabled;

  /// If true, enables the tilt gestures.
  bool tiltGesturesEnabled;

  /// If true, enables the zoom gestures.
  bool zoomGesturesEnabled;

  /// If true, enables the scroll gestures during rotate or zoom.
  bool scrollGesturesEnabledDuringRotateOrZoom;

  /// If true, enables the map toolbar.
  bool mapToolbarEnabled;

  /// The minimum zoom level that can be set for the map.
  double? minZoomPreference;

  /// The maximum zoom level that can be set for the map.
  double? maxZoomPreference;

  /// If true, enables zoom controls for the map.
  bool zoomControlsEnabled;

  /// Specifies a bounds to constrain the camera target, so that when users scroll and pan the map,
  /// the camera target does not move outside these bounds.
  LatLngBoundsDto? cameraTargetBounds;

  /// Specifies the padding for the map.
  MapPaddingDto? padding;

  List<Object?> _toList() {
    return <Object?>[
      cameraPosition,
      mapType,
      compassEnabled,
      rotateGesturesEnabled,
      scrollGesturesEnabled,
      tiltGesturesEnabled,
      zoomGesturesEnabled,
      scrollGesturesEnabledDuringRotateOrZoom,
      mapToolbarEnabled,
      minZoomPreference,
      maxZoomPreference,
      zoomControlsEnabled,
      cameraTargetBounds,
      padding,
    ];
  }

  Object encode() {
    return _toList();
  }

  static MapOptionsDto decode(Object result) {
    result as List<Object?>;
    return MapOptionsDto(
      cameraPosition: result[0]! as CameraPositionDto,
      mapType: result[1]! as MapTypeDto,
      compassEnabled: result[2]! as bool,
      rotateGesturesEnabled: result[3]! as bool,
      scrollGesturesEnabled: result[4]! as bool,
      tiltGesturesEnabled: result[5]! as bool,
      zoomGesturesEnabled: result[6]! as bool,
      scrollGesturesEnabledDuringRotateOrZoom: result[7]! as bool,
      mapToolbarEnabled: result[8]! as bool,
      minZoomPreference: result[9] as double?,
      maxZoomPreference: result[10] as double?,
      zoomControlsEnabled: result[11]! as bool,
      cameraTargetBounds: result[12] as LatLngBoundsDto?,
      padding: result[13] as MapPaddingDto?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MapOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// Object containing navigation options used to initialize Google Navigation view.
class NavigationViewOptionsDto {
  NavigationViewOptionsDto({required this.navigationUIEnabledPreference});

  /// Determines the initial visibility of the navigation UI on map initialization.
  NavigationUIEnabledPreferenceDto navigationUIEnabledPreference;

  List<Object?> _toList() {
    return <Object?>[navigationUIEnabledPreference];
  }

  Object encode() {
    return _toList();
  }

  static NavigationViewOptionsDto decode(Object result) {
    result as List<Object?>;
    return NavigationViewOptionsDto(
      navigationUIEnabledPreference:
          result[0]! as NavigationUIEnabledPreferenceDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NavigationViewOptionsDto ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A message for creating a new navigation view.
///
/// This message is used to initialize a new navigation view with a
/// specified initial parameters.
class ViewCreationOptionsDto {
  ViewCreationOptionsDto({
    required this.mapViewType,
    required this.mapOptions,
    this.navigationViewOptions,
  });

  MapViewTypeDto mapViewType;

  MapOptionsDto mapOptions;

  NavigationViewOptionsDto? navigationViewOptions;

  List<Object?> _toList() {
    return <Object?>[mapViewType, mapOptions, navigationViewOptions];
  }

  Object encode() {
    return _toList();
  }

  static ViewCreationOptionsDto decode(Object result) {
    result as List<Object?>;
    return ViewCreationOptionsDto(
      mapViewType: result[0]! as MapViewTypeDto,
      mapOptions: result[1]! as MapOptionsDto,
      navigationViewOptions: result[2] as NavigationViewOptionsDto?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ViewCreationOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class CameraPositionDto {
  CameraPositionDto({
    required this.bearing,
    required this.target,
    required this.tilt,
    required this.zoom,
  });

  double bearing;

  LatLngDto target;

  double tilt;

  double zoom;

  List<Object?> _toList() {
    return <Object?>[bearing, target, tilt, zoom];
  }

  Object encode() {
    return _toList();
  }

  static CameraPositionDto decode(Object result) {
    result as List<Object?>;
    return CameraPositionDto(
      bearing: result[0]! as double,
      target: result[1]! as LatLngDto,
      tilt: result[2]! as double,
      zoom: result[3]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CameraPositionDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class MarkerDto {
  MarkerDto({required this.markerId, required this.options});

  /// Identifies marker
  String markerId;

  /// Options for marker
  MarkerOptionsDto options;

  List<Object?> _toList() {
    return <Object?>[markerId, options];
  }

  Object encode() {
    return _toList();
  }

  static MarkerDto decode(Object result) {
    result as List<Object?>;
    return MarkerDto(
      markerId: result[0]! as String,
      options: result[1]! as MarkerOptionsDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MarkerDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class MarkerOptionsDto {
  MarkerOptionsDto({
    required this.alpha,
    required this.anchor,
    required this.draggable,
    required this.flat,
    required this.consumeTapEvents,
    required this.position,
    required this.rotation,
    required this.infoWindow,
    required this.visible,
    required this.zIndex,
    required this.icon,
  });

  double alpha;

  MarkerAnchorDto anchor;

  bool draggable;

  bool flat;

  bool consumeTapEvents;

  LatLngDto position;

  double rotation;

  InfoWindowDto infoWindow;

  bool visible;

  double zIndex;

  ImageDescriptorDto icon;

  List<Object?> _toList() {
    return <Object?>[
      alpha,
      anchor,
      draggable,
      flat,
      consumeTapEvents,
      position,
      rotation,
      infoWindow,
      visible,
      zIndex,
      icon,
    ];
  }

  Object encode() {
    return _toList();
  }

  static MarkerOptionsDto decode(Object result) {
    result as List<Object?>;
    return MarkerOptionsDto(
      alpha: result[0]! as double,
      anchor: result[1]! as MarkerAnchorDto,
      draggable: result[2]! as bool,
      flat: result[3]! as bool,
      consumeTapEvents: result[4]! as bool,
      position: result[5]! as LatLngDto,
      rotation: result[6]! as double,
      infoWindow: result[7]! as InfoWindowDto,
      visible: result[8]! as bool,
      zIndex: result[9]! as double,
      icon: result[10]! as ImageDescriptorDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MarkerOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class ImageDescriptorDto {
  ImageDescriptorDto({
    this.registeredImageId,
    this.imagePixelRatio,
    this.width,
    this.height,
  });

  String? registeredImageId;

  double? imagePixelRatio;

  double? width;

  double? height;

  List<Object?> _toList() {
    return <Object?>[registeredImageId, imagePixelRatio, width, height];
  }

  Object encode() {
    return _toList();
  }

  static ImageDescriptorDto decode(Object result) {
    result as List<Object?>;
    return ImageDescriptorDto(
      registeredImageId: result[0] as String?,
      imagePixelRatio: result[1] as double?,
      width: result[2] as double?,
      height: result[3] as double?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ImageDescriptorDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class InfoWindowDto {
  InfoWindowDto({this.title, this.snippet, required this.anchor});

  String? title;

  String? snippet;

  MarkerAnchorDto anchor;

  List<Object?> _toList() {
    return <Object?>[title, snippet, anchor];
  }

  Object encode() {
    return _toList();
  }

  static InfoWindowDto decode(Object result) {
    result as List<Object?>;
    return InfoWindowDto(
      title: result[0] as String?,
      snippet: result[1] as String?,
      anchor: result[2]! as MarkerAnchorDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! InfoWindowDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class MarkerAnchorDto {
  MarkerAnchorDto({required this.u, required this.v});

  double u;

  double v;

  List<Object?> _toList() {
    return <Object?>[u, v];
  }

  Object encode() {
    return _toList();
  }

  static MarkerAnchorDto decode(Object result) {
    result as List<Object?>;
    return MarkerAnchorDto(u: result[0]! as double, v: result[1]! as double);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MarkerAnchorDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class PolygonDto {
  PolygonDto({required this.polygonId, required this.options});

  String polygonId;

  PolygonOptionsDto options;

  List<Object?> _toList() {
    return <Object?>[polygonId, options];
  }

  Object encode() {
    return _toList();
  }

  static PolygonDto decode(Object result) {
    result as List<Object?>;
    return PolygonDto(
      polygonId: result[0]! as String,
      options: result[1]! as PolygonOptionsDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PolygonDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class PolygonOptionsDto {
  PolygonOptionsDto({
    required this.points,
    required this.holes,
    required this.clickable,
    required this.fillColor,
    required this.geodesic,
    required this.strokeColor,
    required this.strokeWidth,
    required this.visible,
    required this.zIndex,
  });

  List<LatLngDto?> points;

  List<PolygonHoleDto?> holes;

  bool clickable;

  int fillColor;

  bool geodesic;

  int strokeColor;

  double strokeWidth;

  bool visible;

  double zIndex;

  List<Object?> _toList() {
    return <Object?>[
      points,
      holes,
      clickable,
      fillColor,
      geodesic,
      strokeColor,
      strokeWidth,
      visible,
      zIndex,
    ];
  }

  Object encode() {
    return _toList();
  }

  static PolygonOptionsDto decode(Object result) {
    result as List<Object?>;
    return PolygonOptionsDto(
      points: (result[0] as List<Object?>?)!.cast<LatLngDto?>(),
      holes: (result[1] as List<Object?>?)!.cast<PolygonHoleDto?>(),
      clickable: result[2]! as bool,
      fillColor: result[3]! as int,
      geodesic: result[4]! as bool,
      strokeColor: result[5]! as int,
      strokeWidth: result[6]! as double,
      visible: result[7]! as bool,
      zIndex: result[8]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PolygonOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class PolygonHoleDto {
  PolygonHoleDto({required this.points});

  List<LatLngDto?> points;

  List<Object?> _toList() {
    return <Object?>[points];
  }

  Object encode() {
    return _toList();
  }

  static PolygonHoleDto decode(Object result) {
    result as List<Object?>;
    return PolygonHoleDto(
      points: (result[0] as List<Object?>?)!.cast<LatLngDto?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PolygonHoleDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class StyleSpanStrokeStyleDto {
  StyleSpanStrokeStyleDto({this.solidColor, this.fromColor, this.toColor});

  int? solidColor;

  int? fromColor;

  int? toColor;

  List<Object?> _toList() {
    return <Object?>[solidColor, fromColor, toColor];
  }

  Object encode() {
    return _toList();
  }

  static StyleSpanStrokeStyleDto decode(Object result) {
    result as List<Object?>;
    return StyleSpanStrokeStyleDto(
      solidColor: result[0] as int?,
      fromColor: result[1] as int?,
      toColor: result[2] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! StyleSpanStrokeStyleDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class StyleSpanDto {
  StyleSpanDto({required this.length, required this.style});

  double length;

  StyleSpanStrokeStyleDto style;

  List<Object?> _toList() {
    return <Object?>[length, style];
  }

  Object encode() {
    return _toList();
  }

  static StyleSpanDto decode(Object result) {
    result as List<Object?>;
    return StyleSpanDto(
      length: result[0]! as double,
      style: result[1]! as StyleSpanStrokeStyleDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! StyleSpanDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class PolylineDto {
  PolylineDto({required this.polylineId, required this.options});

  String polylineId;

  PolylineOptionsDto options;

  List<Object?> _toList() {
    return <Object?>[polylineId, options];
  }

  Object encode() {
    return _toList();
  }

  static PolylineDto decode(Object result) {
    result as List<Object?>;
    return PolylineDto(
      polylineId: result[0]! as String,
      options: result[1]! as PolylineOptionsDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PolylineDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class PatternItemDto {
  PatternItemDto({required this.type, this.length});

  PatternTypeDto type;

  double? length;

  List<Object?> _toList() {
    return <Object?>[type, length];
  }

  Object encode() {
    return _toList();
  }

  static PatternItemDto decode(Object result) {
    result as List<Object?>;
    return PatternItemDto(
      type: result[0]! as PatternTypeDto,
      length: result[1] as double?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PatternItemDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class PolylineOptionsDto {
  PolylineOptionsDto({
    this.points,
    this.clickable,
    this.geodesic,
    this.strokeColor,
    this.strokeJointType,
    this.strokePattern,
    this.strokeWidth,
    this.visible,
    this.zIndex,
    required this.spans,
  });

  List<LatLngDto?>? points;

  bool? clickable;

  bool? geodesic;

  int? strokeColor;

  StrokeJointTypeDto? strokeJointType;

  List<PatternItemDto?>? strokePattern;

  double? strokeWidth;

  bool? visible;

  double? zIndex;

  List<StyleSpanDto?> spans;

  List<Object?> _toList() {
    return <Object?>[
      points,
      clickable,
      geodesic,
      strokeColor,
      strokeJointType,
      strokePattern,
      strokeWidth,
      visible,
      zIndex,
      spans,
    ];
  }

  Object encode() {
    return _toList();
  }

  static PolylineOptionsDto decode(Object result) {
    result as List<Object?>;
    return PolylineOptionsDto(
      points: (result[0] as List<Object?>?)?.cast<LatLngDto?>(),
      clickable: result[1] as bool?,
      geodesic: result[2] as bool?,
      strokeColor: result[3] as int?,
      strokeJointType: result[4] as StrokeJointTypeDto?,
      strokePattern: (result[5] as List<Object?>?)?.cast<PatternItemDto?>(),
      strokeWidth: result[6] as double?,
      visible: result[7] as bool?,
      zIndex: result[8] as double?,
      spans: (result[9] as List<Object?>?)!.cast<StyleSpanDto?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! PolylineOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class CircleDto {
  CircleDto({required this.circleId, required this.options});

  /// Identifies circle.
  String circleId;

  /// Options for circle.
  CircleOptionsDto options;

  List<Object?> _toList() {
    return <Object?>[circleId, options];
  }

  Object encode() {
    return _toList();
  }

  static CircleDto decode(Object result) {
    result as List<Object?>;
    return CircleDto(
      circleId: result[0]! as String,
      options: result[1]! as CircleOptionsDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CircleDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class CircleOptionsDto {
  CircleOptionsDto({
    required this.position,
    required this.radius,
    required this.strokeWidth,
    required this.strokeColor,
    required this.strokePattern,
    required this.fillColor,
    required this.zIndex,
    required this.visible,
    required this.clickable,
  });

  LatLngDto position;

  double radius;

  double strokeWidth;

  int strokeColor;

  List<PatternItemDto?> strokePattern;

  int fillColor;

  double zIndex;

  bool visible;

  bool clickable;

  List<Object?> _toList() {
    return <Object?>[
      position,
      radius,
      strokeWidth,
      strokeColor,
      strokePattern,
      fillColor,
      zIndex,
      visible,
      clickable,
    ];
  }

  Object encode() {
    return _toList();
  }

  static CircleOptionsDto decode(Object result) {
    result as List<Object?>;
    return CircleOptionsDto(
      position: result[0]! as LatLngDto,
      radius: result[1]! as double,
      strokeWidth: result[2]! as double,
      strokeColor: result[3]! as int,
      strokePattern: (result[4] as List<Object?>?)!.cast<PatternItemDto?>(),
      fillColor: result[5]! as int,
      zIndex: result[6]! as double,
      visible: result[7]! as bool,
      clickable: result[8]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CircleOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class MapPaddingDto {
  MapPaddingDto({
    required this.top,
    required this.left,
    required this.bottom,
    required this.right,
  });

  int top;

  int left;

  int bottom;

  int right;

  List<Object?> _toList() {
    return <Object?>[top, left, bottom, right];
  }

  Object encode() {
    return _toList();
  }

  static MapPaddingDto decode(Object result) {
    result as List<Object?>;
    return MapPaddingDto(
      top: result[0]! as int,
      left: result[1]! as int,
      bottom: result[2]! as int,
      right: result[3]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! MapPaddingDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class RouteTokenOptionsDto {
  RouteTokenOptionsDto({required this.routeToken, this.travelMode});

  String routeToken;

  TravelModeDto? travelMode;

  List<Object?> _toList() {
    return <Object?>[routeToken, travelMode];
  }

  Object encode() {
    return _toList();
  }

  static RouteTokenOptionsDto decode(Object result) {
    result as List<Object?>;
    return RouteTokenOptionsDto(
      routeToken: result[0]! as String,
      travelMode: result[1] as TravelModeDto?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RouteTokenOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class DestinationsDto {
  DestinationsDto({
    required this.waypoints,
    required this.displayOptions,
    this.routingOptions,
    this.routeTokenOptions,
  });

  List<NavigationWaypointDto?> waypoints;

  NavigationDisplayOptionsDto displayOptions;

  RoutingOptionsDto? routingOptions;

  RouteTokenOptionsDto? routeTokenOptions;

  List<Object?> _toList() {
    return <Object?>[
      waypoints,
      displayOptions,
      routingOptions,
      routeTokenOptions,
    ];
  }

  Object encode() {
    return _toList();
  }

  static DestinationsDto decode(Object result) {
    result as List<Object?>;
    return DestinationsDto(
      waypoints: (result[0] as List<Object?>?)!.cast<NavigationWaypointDto?>(),
      displayOptions: result[1]! as NavigationDisplayOptionsDto,
      routingOptions: result[2] as RoutingOptionsDto?,
      routeTokenOptions: result[3] as RouteTokenOptionsDto?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! DestinationsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class RoutingOptionsDto {
  RoutingOptionsDto({
    this.alternateRoutesStrategy,
    this.routingStrategy,
    this.targetDistanceMeters,
    this.travelMode,
    this.avoidTolls,
    this.avoidFerries,
    this.avoidHighways,
    this.locationTimeoutMs,
  });

  AlternateRoutesStrategyDto? alternateRoutesStrategy;

  RoutingStrategyDto? routingStrategy;

  List<int?>? targetDistanceMeters;

  TravelModeDto? travelMode;

  bool? avoidTolls;

  bool? avoidFerries;

  bool? avoidHighways;

  int? locationTimeoutMs;

  List<Object?> _toList() {
    return <Object?>[
      alternateRoutesStrategy,
      routingStrategy,
      targetDistanceMeters,
      travelMode,
      avoidTolls,
      avoidFerries,
      avoidHighways,
      locationTimeoutMs,
    ];
  }

  Object encode() {
    return _toList();
  }

  static RoutingOptionsDto decode(Object result) {
    result as List<Object?>;
    return RoutingOptionsDto(
      alternateRoutesStrategy: result[0] as AlternateRoutesStrategyDto?,
      routingStrategy: result[1] as RoutingStrategyDto?,
      targetDistanceMeters: (result[2] as List<Object?>?)?.cast<int?>(),
      travelMode: result[3] as TravelModeDto?,
      avoidTolls: result[4] as bool?,
      avoidFerries: result[5] as bool?,
      avoidHighways: result[6] as bool?,
      locationTimeoutMs: result[7] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RoutingOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NavigationDisplayOptionsDto {
  NavigationDisplayOptionsDto({
    this.showDestinationMarkers,
    this.showStopSigns,
    this.showTrafficLights,
  });

  bool? showDestinationMarkers;

  bool? showStopSigns;

  bool? showTrafficLights;

  List<Object?> _toList() {
    return <Object?>[showDestinationMarkers, showStopSigns, showTrafficLights];
  }

  Object encode() {
    return _toList();
  }

  static NavigationDisplayOptionsDto decode(Object result) {
    result as List<Object?>;
    return NavigationDisplayOptionsDto(
      showDestinationMarkers: result[0] as bool?,
      showStopSigns: result[1] as bool?,
      showTrafficLights: result[2] as bool?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NavigationDisplayOptionsDto ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NavigationWaypointDto {
  NavigationWaypointDto({
    required this.title,
    this.target,
    this.placeID,
    this.preferSameSideOfRoad,
    this.preferredSegmentHeading,
  });

  String title;

  LatLngDto? target;

  String? placeID;

  bool? preferSameSideOfRoad;

  int? preferredSegmentHeading;

  List<Object?> _toList() {
    return <Object?>[
      title,
      target,
      placeID,
      preferSameSideOfRoad,
      preferredSegmentHeading,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NavigationWaypointDto decode(Object result) {
    result as List<Object?>;
    return NavigationWaypointDto(
      title: result[0]! as String,
      target: result[1] as LatLngDto?,
      placeID: result[2] as String?,
      preferSameSideOfRoad: result[3] as bool?,
      preferredSegmentHeading: result[4] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NavigationWaypointDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NavigationTimeAndDistanceDto {
  NavigationTimeAndDistanceDto({required this.time, required this.distance});

  double time;

  double distance;

  List<Object?> _toList() {
    return <Object?>[time, distance];
  }

  Object encode() {
    return _toList();
  }

  static NavigationTimeAndDistanceDto decode(Object result) {
    result as List<Object?>;
    return NavigationTimeAndDistanceDto(
      time: result[0]! as double,
      distance: result[1]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NavigationTimeAndDistanceDto ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NavigationAudioGuidanceSettingsDto {
  NavigationAudioGuidanceSettingsDto({
    this.isBluetoothAudioEnabled,
    this.isVibrationEnabled,
    this.guidanceType,
  });

  bool? isBluetoothAudioEnabled;

  bool? isVibrationEnabled;

  AudioGuidanceTypeDto? guidanceType;

  List<Object?> _toList() {
    return <Object?>[isBluetoothAudioEnabled, isVibrationEnabled, guidanceType];
  }

  Object encode() {
    return _toList();
  }

  static NavigationAudioGuidanceSettingsDto decode(Object result) {
    result as List<Object?>;
    return NavigationAudioGuidanceSettingsDto(
      isBluetoothAudioEnabled: result[0] as bool?,
      isVibrationEnabled: result[1] as bool?,
      guidanceType: result[2] as AudioGuidanceTypeDto?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NavigationAudioGuidanceSettingsDto ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class SimulationOptionsDto {
  SimulationOptionsDto({required this.speedMultiplier});

  double speedMultiplier;

  List<Object?> _toList() {
    return <Object?>[speedMultiplier];
  }

  Object encode() {
    return _toList();
  }

  static SimulationOptionsDto decode(Object result) {
    result as List<Object?>;
    return SimulationOptionsDto(speedMultiplier: result[0]! as double);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SimulationOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class LatLngDto {
  LatLngDto({required this.latitude, required this.longitude});

  double latitude;

  double longitude;

  List<Object?> _toList() {
    return <Object?>[latitude, longitude];
  }

  Object encode() {
    return _toList();
  }

  static LatLngDto decode(Object result) {
    result as List<Object?>;
    return LatLngDto(
      latitude: result[0]! as double,
      longitude: result[1]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! LatLngDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class LatLngBoundsDto {
  LatLngBoundsDto({required this.southwest, required this.northeast});

  LatLngDto southwest;

  LatLngDto northeast;

  List<Object?> _toList() {
    return <Object?>[southwest, northeast];
  }

  Object encode() {
    return _toList();
  }

  static LatLngBoundsDto decode(Object result) {
    result as List<Object?>;
    return LatLngBoundsDto(
      southwest: result[0]! as LatLngDto,
      northeast: result[1]! as LatLngDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! LatLngBoundsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class SpeedingUpdatedEventDto {
  SpeedingUpdatedEventDto({
    required this.percentageAboveLimit,
    required this.severity,
  });

  double percentageAboveLimit;

  SpeedAlertSeverityDto severity;

  List<Object?> _toList() {
    return <Object?>[percentageAboveLimit, severity];
  }

  Object encode() {
    return _toList();
  }

  static SpeedingUpdatedEventDto decode(Object result) {
    result as List<Object?>;
    return SpeedingUpdatedEventDto(
      percentageAboveLimit: result[0]! as double,
      severity: result[1]! as SpeedAlertSeverityDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SpeedingUpdatedEventDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class SpeedAlertOptionsThresholdPercentageDto {
  SpeedAlertOptionsThresholdPercentageDto({
    required this.percentage,
    required this.severity,
  });

  double percentage;

  SpeedAlertSeverityDto severity;

  List<Object?> _toList() {
    return <Object?>[percentage, severity];
  }

  Object encode() {
    return _toList();
  }

  static SpeedAlertOptionsThresholdPercentageDto decode(Object result) {
    result as List<Object?>;
    return SpeedAlertOptionsThresholdPercentageDto(
      percentage: result[0]! as double,
      severity: result[1]! as SpeedAlertSeverityDto,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SpeedAlertOptionsThresholdPercentageDto ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class SpeedAlertOptionsDto {
  SpeedAlertOptionsDto({
    required this.severityUpgradeDurationSeconds,
    required this.minorSpeedAlertThresholdPercentage,
    required this.majorSpeedAlertThresholdPercentage,
  });

  double severityUpgradeDurationSeconds;

  double minorSpeedAlertThresholdPercentage;

  double majorSpeedAlertThresholdPercentage;

  List<Object?> _toList() {
    return <Object?>[
      severityUpgradeDurationSeconds,
      minorSpeedAlertThresholdPercentage,
      majorSpeedAlertThresholdPercentage,
    ];
  }

  Object encode() {
    return _toList();
  }

  static SpeedAlertOptionsDto decode(Object result) {
    result as List<Object?>;
    return SpeedAlertOptionsDto(
      severityUpgradeDurationSeconds: result[0]! as double,
      minorSpeedAlertThresholdPercentage: result[1]! as double,
      majorSpeedAlertThresholdPercentage: result[2]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! SpeedAlertOptionsDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class RouteSegmentTrafficDataRoadStretchRenderingDataDto {
  RouteSegmentTrafficDataRoadStretchRenderingDataDto({
    required this.style,
    required this.lengthMeters,
    required this.offsetMeters,
  });

  RouteSegmentTrafficDataRoadStretchRenderingDataStyleDto style;

  int lengthMeters;

  int offsetMeters;

  List<Object?> _toList() {
    return <Object?>[style, lengthMeters, offsetMeters];
  }

  Object encode() {
    return _toList();
  }

  static RouteSegmentTrafficDataRoadStretchRenderingDataDto decode(
    Object result,
  ) {
    result as List<Object?>;
    return RouteSegmentTrafficDataRoadStretchRenderingDataDto(
      style:
          result[0]! as RouteSegmentTrafficDataRoadStretchRenderingDataStyleDto,
      lengthMeters: result[1]! as int,
      offsetMeters: result[2]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RouteSegmentTrafficDataRoadStretchRenderingDataDto ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class RouteSegmentTrafficDataDto {
  RouteSegmentTrafficDataDto({
    required this.status,
    required this.roadStretchRenderingDataList,
  });

  RouteSegmentTrafficDataStatusDto status;

  List<RouteSegmentTrafficDataRoadStretchRenderingDataDto?>
  roadStretchRenderingDataList;

  List<Object?> _toList() {
    return <Object?>[status, roadStretchRenderingDataList];
  }

  Object encode() {
    return _toList();
  }

  static RouteSegmentTrafficDataDto decode(Object result) {
    result as List<Object?>;
    return RouteSegmentTrafficDataDto(
      status: result[0]! as RouteSegmentTrafficDataStatusDto,
      roadStretchRenderingDataList:
          (result[1] as List<Object?>?)!
              .cast<RouteSegmentTrafficDataRoadStretchRenderingDataDto?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RouteSegmentTrafficDataDto ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class RouteSegmentDto {
  RouteSegmentDto({
    this.trafficData,
    required this.destinationLatLng,
    this.latLngs,
    this.destinationWaypoint,
  });

  RouteSegmentTrafficDataDto? trafficData;

  LatLngDto destinationLatLng;

  List<LatLngDto?>? latLngs;

  NavigationWaypointDto? destinationWaypoint;

  List<Object?> _toList() {
    return <Object?>[
      trafficData,
      destinationLatLng,
      latLngs,
      destinationWaypoint,
    ];
  }

  Object encode() {
    return _toList();
  }

  static RouteSegmentDto decode(Object result) {
    result as List<Object?>;
    return RouteSegmentDto(
      trafficData: result[0] as RouteSegmentTrafficDataDto?,
      destinationLatLng: result[1]! as LatLngDto,
      latLngs: (result[2] as List<Object?>?)?.cast<LatLngDto?>(),
      destinationWaypoint: result[3] as NavigationWaypointDto?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! RouteSegmentDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// One of the possible directions from a lane at the end of a route step, and whether it is on the recommended route.
class LaneDirectionDto {
  LaneDirectionDto({required this.laneShape, required this.isRecommended});

  /// Shape for this lane direction.
  LaneShapeDto laneShape;

  /// Whether this lane is recommended.
  bool isRecommended;

  List<Object?> _toList() {
    return <Object?>[laneShape, isRecommended];
  }

  Object encode() {
    return _toList();
  }

  static LaneDirectionDto decode(Object result) {
    result as List<Object?>;
    return LaneDirectionDto(
      laneShape: result[0]! as LaneShapeDto,
      isRecommended: result[1]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! LaneDirectionDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// Single lane on the road at the end of a route step.
class LaneDto {
  LaneDto({required this.laneDirections});

  /// List of possible directions a driver can follow when using this lane at the end of the respective route step
  List<LaneDirectionDto?> laneDirections;

  List<Object?> _toList() {
    return <Object?>[laneDirections];
  }

  Object encode() {
    return _toList();
  }

  static LaneDto decode(Object result) {
    result as List<Object?>;
    return LaneDto(
      laneDirections: (result[0] as List<Object?>?)!.cast<LaneDirectionDto?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! LaneDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// Information about a single step along a navigation route.
class StepInfoDto {
  StepInfoDto({
    required this.distanceFromPrevStepMeters,
    required this.timeFromPrevStepSeconds,
    required this.drivingSide,
    this.exitNumber,
    required this.fullInstructions,
    required this.fullRoadName,
    required this.simpleRoadName,
    required this.roundaboutTurnNumber,
    required this.lanes,
    required this.maneuver,
    required this.stepNumber,
  });

  /// Distance in meters from the previous step to this step.
  int distanceFromPrevStepMeters;

  /// Time in seconds from the previous step to this step.
  int timeFromPrevStepSeconds;

  /// Whether this step is on a drive-on-right or drive-on-left route.
  DrivingSideDto drivingSide;

  /// The exit number if it exists.
  String? exitNumber;

  /// The full text of the instruction for this step.
  String fullInstructions;

  /// The full road name for this step.
  String fullRoadName;

  /// The simplified version of the road name.
  String simpleRoadName;

  /// The counted number of the exit to take relative to the location where the
  /// roundabout was entered.
  int roundaboutTurnNumber;

  /// The list of available lanes at the end of this route step.
  List<LaneDto?> lanes;

  /// The maneuver for this step.
  ManeuverDto maneuver;

  /// The index of the step in the list of all steps in the route.
  int stepNumber;

  List<Object?> _toList() {
    return <Object?>[
      distanceFromPrevStepMeters,
      timeFromPrevStepSeconds,
      drivingSide,
      exitNumber,
      fullInstructions,
      fullRoadName,
      simpleRoadName,
      roundaboutTurnNumber,
      lanes,
      maneuver,
      stepNumber,
    ];
  }

  Object encode() {
    return _toList();
  }

  static StepInfoDto decode(Object result) {
    result as List<Object?>;
    return StepInfoDto(
      distanceFromPrevStepMeters: result[0]! as int,
      timeFromPrevStepSeconds: result[1]! as int,
      drivingSide: result[2]! as DrivingSideDto,
      exitNumber: result[3] as String?,
      fullInstructions: result[4]! as String,
      fullRoadName: result[5]! as String,
      simpleRoadName: result[6]! as String,
      roundaboutTurnNumber: result[7]! as int,
      lanes: (result[8] as List<Object?>?)!.cast<LaneDto?>(),
      maneuver: result[9]! as ManeuverDto,
      stepNumber: result[10]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! StepInfoDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// Contains information about the state of navigation, the current nav step if
/// available, and remaining steps if available.
class NavInfoDto {
  NavInfoDto({
    required this.navState,
    this.currentStep,
    required this.remainingSteps,
    required this.routeChanged,
    this.distanceToCurrentStepMeters,
    this.distanceToFinalDestinationMeters,
    this.distanceToNextDestinationMeters,
    this.timeToCurrentStepSeconds,
    this.timeToFinalDestinationSeconds,
    this.timeToNextDestinationSeconds,
  });

  /// The current state of navigation.
  NavStateDto navState;

  /// Information about the upcoming maneuver step.
  StepInfoDto? currentStep;

  /// The remaining steps after the current step.
  List<StepInfoDto?> remainingSteps;

  /// Whether the route has changed since the last sent message.
  bool routeChanged;

  /// Estimated remaining distance in meters along the route to the
  /// current step.
  int? distanceToCurrentStepMeters;

  /// The estimated remaining distance in meters to the final destination which
  /// is the last destination in a multi-destination trip.
  int? distanceToFinalDestinationMeters;

  /// The estimated remaining distance in meters to the next destination.
  ///
  /// Android only.
  int? distanceToNextDestinationMeters;

  /// The estimated remaining time in seconds along the route to the
  /// current step.
  int? timeToCurrentStepSeconds;

  /// The estimated remaining time in seconds to the final destination which is
  /// the last destination in a multi-destination trip.
  int? timeToFinalDestinationSeconds;

  /// The estimated remaining time in seconds to the next destination.
  ///
  /// Android only.
  int? timeToNextDestinationSeconds;

  List<Object?> _toList() {
    return <Object?>[
      navState,
      currentStep,
      remainingSteps,
      routeChanged,
      distanceToCurrentStepMeters,
      distanceToFinalDestinationMeters,
      distanceToNextDestinationMeters,
      timeToCurrentStepSeconds,
      timeToFinalDestinationSeconds,
      timeToNextDestinationSeconds,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NavInfoDto decode(Object result) {
    result as List<Object?>;
    return NavInfoDto(
      navState: result[0]! as NavStateDto,
      currentStep: result[1] as StepInfoDto?,
      remainingSteps: (result[2] as List<Object?>?)!.cast<StepInfoDto?>(),
      routeChanged: result[3]! as bool,
      distanceToCurrentStepMeters: result[4] as int?,
      distanceToFinalDestinationMeters: result[5] as int?,
      distanceToNextDestinationMeters: result[6] as int?,
      timeToCurrentStepSeconds: result[7] as int?,
      timeToFinalDestinationSeconds: result[8] as int?,
      timeToNextDestinationSeconds: result[9] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NavInfoDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is MapViewTypeDto) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is NavigationUIEnabledPreferenceDto) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is MapTypeDto) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    } else if (value is CameraPerspectiveDto) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    } else if (value is MarkerEventTypeDto) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    } else if (value is MarkerDragEventTypeDto) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    } else if (value is StrokeJointTypeDto) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    } else if (value is PatternTypeDto) {
      buffer.putUint8(136);
      writeValue(buffer, value.index);
    } else if (value is CameraEventTypeDto) {
      buffer.putUint8(137);
      writeValue(buffer, value.index);
    } else if (value is AlternateRoutesStrategyDto) {
      buffer.putUint8(138);
      writeValue(buffer, value.index);
    } else if (value is RoutingStrategyDto) {
      buffer.putUint8(139);
      writeValue(buffer, value.index);
    } else if (value is TravelModeDto) {
      buffer.putUint8(140);
      writeValue(buffer, value.index);
    } else if (value is RouteStatusDto) {
      buffer.putUint8(141);
      writeValue(buffer, value.index);
    } else if (value is AudioGuidanceTypeDto) {
      buffer.putUint8(142);
      writeValue(buffer, value.index);
    } else if (value is SpeedAlertSeverityDto) {
      buffer.putUint8(143);
      writeValue(buffer, value.index);
    } else if (value is RouteSegmentTrafficDataStatusDto) {
      buffer.putUint8(144);
      writeValue(buffer, value.index);
    } else if (value
        is RouteSegmentTrafficDataRoadStretchRenderingDataStyleDto) {
      buffer.putUint8(145);
      writeValue(buffer, value.index);
    } else if (value is ManeuverDto) {
      buffer.putUint8(146);
      writeValue(buffer, value.index);
    } else if (value is DrivingSideDto) {
      buffer.putUint8(147);
      writeValue(buffer, value.index);
    } else if (value is NavStateDto) {
      buffer.putUint8(148);
      writeValue(buffer, value.index);
    } else if (value is LaneShapeDto) {
      buffer.putUint8(149);
      writeValue(buffer, value.index);
    } else if (value is TaskRemovedBehaviorDto) {
      buffer.putUint8(150);
      writeValue(buffer, value.index);
    } else if (value is MapOptionsDto) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is NavigationViewOptionsDto) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is ViewCreationOptionsDto) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is CameraPositionDto) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is MarkerDto) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is MarkerOptionsDto) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else if (value is ImageDescriptorDto) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    } else if (value is InfoWindowDto) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else if (value is MarkerAnchorDto) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    } else if (value is PolygonDto) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    } else if (value is PolygonOptionsDto) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    } else if (value is PolygonHoleDto) {
      buffer.putUint8(162);
      writeValue(buffer, value.encode());
    } else if (value is StyleSpanStrokeStyleDto) {
      buffer.putUint8(163);
      writeValue(buffer, value.encode());
    } else if (value is StyleSpanDto) {
      buffer.putUint8(164);
      writeValue(buffer, value.encode());
    } else if (value is PolylineDto) {
      buffer.putUint8(165);
      writeValue(buffer, value.encode());
    } else if (value is PatternItemDto) {
      buffer.putUint8(166);
      writeValue(buffer, value.encode());
    } else if (value is PolylineOptionsDto) {
      buffer.putUint8(167);
      writeValue(buffer, value.encode());
    } else if (value is CircleDto) {
      buffer.putUint8(168);
      writeValue(buffer, value.encode());
    } else if (value is CircleOptionsDto) {
      buffer.putUint8(169);
      writeValue(buffer, value.encode());
    } else if (value is MapPaddingDto) {
      buffer.putUint8(170);
      writeValue(buffer, value.encode());
    } else if (value is RouteTokenOptionsDto) {
      buffer.putUint8(171);
      writeValue(buffer, value.encode());
    } else if (value is DestinationsDto) {
      buffer.putUint8(172);
      writeValue(buffer, value.encode());
    } else if (value is RoutingOptionsDto) {
      buffer.putUint8(173);
      writeValue(buffer, value.encode());
    } else if (value is NavigationDisplayOptionsDto) {
      buffer.putUint8(174);
      writeValue(buffer, value.encode());
    } else if (value is NavigationWaypointDto) {
      buffer.putUint8(175);
      writeValue(buffer, value.encode());
    } else if (value is NavigationTimeAndDistanceDto) {
      buffer.putUint8(176);
      writeValue(buffer, value.encode());
    } else if (value is NavigationAudioGuidanceSettingsDto) {
      buffer.putUint8(177);
      writeValue(buffer, value.encode());
    } else if (value is SimulationOptionsDto) {
      buffer.putUint8(178);
      writeValue(buffer, value.encode());
    } else if (value is LatLngDto) {
      buffer.putUint8(179);
      writeValue(buffer, value.encode());
    } else if (value is LatLngBoundsDto) {
      buffer.putUint8(180);
      writeValue(buffer, value.encode());
    } else if (value is SpeedingUpdatedEventDto) {
      buffer.putUint8(181);
      writeValue(buffer, value.encode());
    } else if (value is SpeedAlertOptionsThresholdPercentageDto) {
      buffer.putUint8(182);
      writeValue(buffer, value.encode());
    } else if (value is SpeedAlertOptionsDto) {
      buffer.putUint8(183);
      writeValue(buffer, value.encode());
    } else if (value is RouteSegmentTrafficDataRoadStretchRenderingDataDto) {
      buffer.putUint8(184);
      writeValue(buffer, value.encode());
    } else if (value is RouteSegmentTrafficDataDto) {
      buffer.putUint8(185);
      writeValue(buffer, value.encode());
    } else if (value is RouteSegmentDto) {
      buffer.putUint8(186);
      writeValue(buffer, value.encode());
    } else if (value is LaneDirectionDto) {
      buffer.putUint8(187);
      writeValue(buffer, value.encode());
    } else if (value is LaneDto) {
      buffer.putUint8(188);
      writeValue(buffer, value.encode());
    } else if (value is StepInfoDto) {
      buffer.putUint8(189);
      writeValue(buffer, value.encode());
    } else if (value is NavInfoDto) {
      buffer.putUint8(190);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MapViewTypeDto.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : NavigationUIEnabledPreferenceDto.values[value];
      case 131:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MapTypeDto.values[value];
      case 132:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CameraPerspectiveDto.values[value];
      case 133:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MarkerEventTypeDto.values[value];
      case 134:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : MarkerDragEventTypeDto.values[value];
      case 135:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : StrokeJointTypeDto.values[value];
      case 136:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PatternTypeDto.values[value];
      case 137:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CameraEventTypeDto.values[value];
      case 138:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AlternateRoutesStrategyDto.values[value];
      case 139:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RoutingStrategyDto.values[value];
      case 140:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TravelModeDto.values[value];
      case 141:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : RouteStatusDto.values[value];
      case 142:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AudioGuidanceTypeDto.values[value];
      case 143:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : SpeedAlertSeverityDto.values[value];
      case 144:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : RouteSegmentTrafficDataStatusDto.values[value];
      case 145:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : RouteSegmentTrafficDataRoadStretchRenderingDataStyleDto
                .values[value];
      case 146:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ManeuverDto.values[value];
      case 147:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DrivingSideDto.values[value];
      case 148:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NavStateDto.values[value];
      case 149:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : LaneShapeDto.values[value];
      case 150:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TaskRemovedBehaviorDto.values[value];
      case 151:
        return MapOptionsDto.decode(readValue(buffer)!);
      case 152:
        return NavigationViewOptionsDto.decode(readValue(buffer)!);
      case 153:
        return ViewCreationOptionsDto.decode(readValue(buffer)!);
      case 154:
        return CameraPositionDto.decode(readValue(buffer)!);
      case 155:
        return MarkerDto.decode(readValue(buffer)!);
      case 156:
        return MarkerOptionsDto.decode(readValue(buffer)!);
      case 157:
        return ImageDescriptorDto.decode(readValue(buffer)!);
      case 158:
        return InfoWindowDto.decode(readValue(buffer)!);
      case 159:
        return MarkerAnchorDto.decode(readValue(buffer)!);
      case 160:
        return PolygonDto.decode(readValue(buffer)!);
      case 161:
        return PolygonOptionsDto.decode(readValue(buffer)!);
      case 162:
        return PolygonHoleDto.decode(readValue(buffer)!);
      case 163:
        return StyleSpanStrokeStyleDto.decode(readValue(buffer)!);
      case 164:
        return StyleSpanDto.decode(readValue(buffer)!);
      case 165:
        return PolylineDto.decode(readValue(buffer)!);
      case 166:
        return PatternItemDto.decode(readValue(buffer)!);
      case 167:
        return PolylineOptionsDto.decode(readValue(buffer)!);
      case 168:
        return CircleDto.decode(readValue(buffer)!);
      case 169:
        return CircleOptionsDto.decode(readValue(buffer)!);
      case 170:
        return MapPaddingDto.decode(readValue(buffer)!);
      case 171:
        return RouteTokenOptionsDto.decode(readValue(buffer)!);
      case 172:
        return DestinationsDto.decode(readValue(buffer)!);
      case 173:
        return RoutingOptionsDto.decode(readValue(buffer)!);
      case 174:
        return NavigationDisplayOptionsDto.decode(readValue(buffer)!);
      case 175:
        return NavigationWaypointDto.decode(readValue(buffer)!);
      case 176:
        return NavigationTimeAndDistanceDto.decode(readValue(buffer)!);
      case 177:
        return NavigationAudioGuidanceSettingsDto.decode(readValue(buffer)!);
      case 178:
        return SimulationOptionsDto.decode(readValue(buffer)!);
      case 179:
        return LatLngDto.decode(readValue(buffer)!);
      case 180:
        return LatLngBoundsDto.decode(readValue(buffer)!);
      case 181:
        return SpeedingUpdatedEventDto.decode(readValue(buffer)!);
      case 182:
        return SpeedAlertOptionsThresholdPercentageDto.decode(
          readValue(buffer)!,
        );
      case 183:
        return SpeedAlertOptionsDto.decode(readValue(buffer)!);
      case 184:
        return RouteSegmentTrafficDataRoadStretchRenderingDataDto.decode(
          readValue(buffer)!,
        );
      case 185:
        return RouteSegmentTrafficDataDto.decode(readValue(buffer)!);
      case 186:
        return RouteSegmentDto.decode(readValue(buffer)!);
      case 187:
        return LaneDirectionDto.decode(readValue(buffer)!);
      case 188:
        return LaneDto.decode(readValue(buffer)!);
      case 189:
        return StepInfoDto.decode(readValue(buffer)!);
      case 190:
        return NavInfoDto.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Dummy interface to force generation of the platform view creation params.
/// Pigeon only generates messages if the messages are used in API.
/// [ViewCreationOptionsDto] is encoded and decoded directly to generate a
/// PlatformView creation message.
///
/// This API should never be used directly.
class ViewCreationApi {
  /// Constructor for [ViewCreationApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ViewCreationApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> create(ViewCreationOptionsDto msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.ViewCreationApi.create$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[msg],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class MapViewApi {
  /// Constructor for [MapViewApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MapViewApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> awaitMapReady(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.awaitMapReady$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isMyLocationEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isMyLocationEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setMyLocationEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setMyLocationEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<LatLngDto?> getMyLocation(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getMyLocation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as LatLngDto?);
    }
  }

  Future<MapTypeDto> getMapType(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getMapType$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MapTypeDto?)!;
    }
  }

  Future<void> setMapType(int viewId, MapTypeDto mapType) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setMapType$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, mapType],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMapStyle(int viewId, String styleJson) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setMapStyle$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, styleJson],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isNavigationTripProgressBarEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isNavigationTripProgressBarEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setNavigationTripProgressBarEnabled(
    int viewId,
    bool enabled,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setNavigationTripProgressBarEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isNavigationHeaderEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isNavigationHeaderEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setNavigationHeaderEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setNavigationHeaderEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isNavigationFooterEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isNavigationFooterEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setNavigationFooterEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setNavigationFooterEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isRecenterButtonEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isRecenterButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setRecenterButtonEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setRecenterButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isSpeedLimitIconEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isSpeedLimitIconEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setSpeedLimitIconEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setSpeedLimitIconEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isSpeedometerEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isSpeedometerEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setSpeedometerEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setSpeedometerEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isNavigationUIEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isNavigationUIEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setNavigationUIEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setNavigationUIEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isMyLocationButtonEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isMyLocationButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setMyLocationButtonEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setMyLocationButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isConsumeMyLocationButtonClickEventsEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isConsumeMyLocationButtonClickEventsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setConsumeMyLocationButtonClickEventsEnabled(
    int viewId,
    bool enabled,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setConsumeMyLocationButtonClickEventsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isZoomGesturesEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isZoomGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setZoomGesturesEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setZoomGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isZoomControlsEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isZoomControlsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setZoomControlsEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setZoomControlsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isCompassEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isCompassEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setCompassEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setCompassEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isRotateGesturesEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isRotateGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setRotateGesturesEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setRotateGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isScrollGesturesEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isScrollGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setScrollGesturesEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setScrollGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isScrollGesturesEnabledDuringRotateOrZoom(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isScrollGesturesEnabledDuringRotateOrZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setScrollGesturesDuringRotateOrZoomEnabled(
    int viewId,
    bool enabled,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setScrollGesturesDuringRotateOrZoomEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isTiltGesturesEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isTiltGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setTiltGesturesEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setTiltGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isMapToolbarEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isMapToolbarEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setMapToolbarEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setMapToolbarEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isTrafficEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isTrafficEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setTrafficEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setTrafficEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isTrafficIncidentCardsEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isTrafficIncidentCardsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setTrafficIncidentCardsEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setTrafficIncidentCardsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isTrafficPromptsEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isTrafficPromptsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setTrafficPromptsEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setTrafficPromptsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isReportIncidentButtonEnabled(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.isReportIncidentButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setReportIncidentButtonEnabled(int viewId, bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setReportIncidentButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<CameraPositionDto> getCameraPosition(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getCameraPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as CameraPositionDto?)!;
    }
  }

  Future<LatLngBoundsDto> getVisibleRegion(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getVisibleRegion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as LatLngBoundsDto?)!;
    }
  }

  Future<void> followMyLocation(
    int viewId,
    CameraPerspectiveDto perspective,
    double? zoomLevel,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.followMyLocation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, perspective, zoomLevel],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> animateCameraToCameraPosition(
    int viewId,
    CameraPositionDto cameraPosition,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.animateCameraToCameraPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, cameraPosition, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToLatLng(
    int viewId,
    LatLngDto point,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.animateCameraToLatLng$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, point, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToLatLngBounds(
    int viewId,
    LatLngBoundsDto bounds,
    double padding,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.animateCameraToLatLngBounds$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, bounds, padding, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToLatLngZoom(
    int viewId,
    LatLngDto point,
    double zoom,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.animateCameraToLatLngZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, point, zoom, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraByScroll(
    int viewId,
    double scrollByDx,
    double scrollByDy,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.animateCameraByScroll$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, scrollByDx, scrollByDy, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraByZoom(
    int viewId,
    double zoomBy,
    double? focusDx,
    double? focusDy,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.animateCameraByZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, zoomBy, focusDx, focusDy, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToZoom(
    int viewId,
    double zoom,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.animateCameraToZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, zoom, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> moveCameraToCameraPosition(
    int viewId,
    CameraPositionDto cameraPosition,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.moveCameraToCameraPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, cameraPosition],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToLatLng(int viewId, LatLngDto point) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.moveCameraToLatLng$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, point],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToLatLngBounds(
    int viewId,
    LatLngBoundsDto bounds,
    double padding,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.moveCameraToLatLngBounds$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, bounds, padding],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToLatLngZoom(
    int viewId,
    LatLngDto point,
    double zoom,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.moveCameraToLatLngZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, point, zoom],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraByScroll(
    int viewId,
    double scrollByDx,
    double scrollByDy,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.moveCameraByScroll$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, scrollByDx, scrollByDy],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraByZoom(
    int viewId,
    double zoomBy,
    double? focusDx,
    double? focusDy,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.moveCameraByZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, zoomBy, focusDx, focusDy],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToZoom(int viewId, double zoom) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.moveCameraToZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, zoom],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> showRouteOverview(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.showRouteOverview$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<double> getMinZoomPreference(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getMinZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as double?)!;
    }
  }

  Future<double> getMaxZoomPreference(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getMaxZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as double?)!;
    }
  }

  Future<void> resetMinMaxZoomPreference(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.resetMinMaxZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMinZoomPreference(
    int viewId,
    double minZoomPreference,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setMinZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, minZoomPreference],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMaxZoomPreference(
    int viewId,
    double maxZoomPreference,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setMaxZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, maxZoomPreference],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<MarkerDto>> getMarkers(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MarkerDto>();
    }
  }

  Future<List<MarkerDto>> addMarkers(
    int viewId,
    List<MarkerDto> markers,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.addMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, markers],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MarkerDto>();
    }
  }

  Future<List<MarkerDto>> updateMarkers(
    int viewId,
    List<MarkerDto> markers,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.updateMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, markers],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MarkerDto>();
    }
  }

  Future<void> removeMarkers(int viewId, List<MarkerDto> markers) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.removeMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, markers],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearMarkers(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.clearMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clear(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.clear$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PolygonDto>> getPolygons(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getPolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolygonDto>();
    }
  }

  Future<List<PolygonDto>> addPolygons(
    int viewId,
    List<PolygonDto> polygons,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.addPolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, polygons],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolygonDto>();
    }
  }

  Future<List<PolygonDto>> updatePolygons(
    int viewId,
    List<PolygonDto> polygons,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.updatePolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, polygons],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolygonDto>();
    }
  }

  Future<void> removePolygons(int viewId, List<PolygonDto> polygons) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.removePolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, polygons],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearPolygons(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.clearPolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PolylineDto>> getPolylines(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getPolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolylineDto>();
    }
  }

  Future<List<PolylineDto>> addPolylines(
    int viewId,
    List<PolylineDto> polylines,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.addPolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, polylines],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolylineDto>();
    }
  }

  Future<List<PolylineDto>> updatePolylines(
    int viewId,
    List<PolylineDto> polylines,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.updatePolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, polylines],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolylineDto>();
    }
  }

  Future<void> removePolylines(int viewId, List<PolylineDto> polylines) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.removePolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, polylines],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearPolylines(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.clearPolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<CircleDto>> getCircles(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<CircleDto>();
    }
  }

  Future<List<CircleDto>> addCircles(
    int viewId,
    List<CircleDto> circles,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.addCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, circles],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<CircleDto>();
    }
  }

  Future<List<CircleDto>> updateCircles(
    int viewId,
    List<CircleDto> circles,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.updateCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, circles],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<CircleDto>();
    }
  }

  Future<void> removeCircles(int viewId, List<CircleDto> circles) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.removeCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, circles],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearCircles(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.clearCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enableOnCameraChangedEvents(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.enableOnCameraChangedEvents$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPadding(int viewId, MapPaddingDto padding) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.setPadding$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId, padding],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MapPaddingDto> getPadding(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.MapViewApi.getPadding$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MapPaddingDto?)!;
    }
  }
}

class ImageRegistryApi {
  /// Constructor for [ImageRegistryApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ImageRegistryApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<ImageDescriptorDto> registerBitmapImage(
    String imageId,
    Uint8List bytes,
    double imagePixelRatio,
    double? width,
    double? height,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.ImageRegistryApi.registerBitmapImage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[imageId, bytes, imagePixelRatio, width, height],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ImageDescriptorDto?)!;
    }
  }

  Future<void> unregisterImage(ImageDescriptorDto imageDescriptor) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.ImageRegistryApi.unregisterImage$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[imageDescriptor],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<ImageDescriptorDto>> getRegisteredImages() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.ImageRegistryApi.getRegisteredImages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!
          .cast<ImageDescriptorDto>();
    }
  }

  Future<void> clearRegisteredImages() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.ImageRegistryApi.clearRegisteredImages$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class ViewEventApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onMapClickEvent(int viewId, LatLngDto latLng);

  void onMapLongClickEvent(int viewId, LatLngDto latLng);

  void onRecenterButtonClicked(int viewId);

  void onMarkerEvent(int viewId, String markerId, MarkerEventTypeDto eventType);

  void onMarkerDragEvent(
    int viewId,
    String markerId,
    MarkerDragEventTypeDto eventType,
    LatLngDto position,
  );

  void onPolygonClicked(int viewId, String polygonId);

  void onPolylineClicked(int viewId, String polylineId);

  void onCircleClicked(int viewId, String circleId);

  void onNavigationUIEnabledChanged(int viewId, bool navigationUIEnabled);

  void onMyLocationClicked(int viewId);

  void onMyLocationButtonClicked(int viewId);

  void onCameraChanged(
    int viewId,
    CameraEventTypeDto eventType,
    CameraPositionDto position,
  );

  static void setUp(
    ViewEventApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapClickEvent$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapClickEvent was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapClickEvent was null, expected non-null int.',
          );
          final LatLngDto? arg_latLng = (args[1] as LatLngDto?);
          assert(
            arg_latLng != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapClickEvent was null, expected non-null LatLngDto.',
          );
          try {
            api.onMapClickEvent(arg_viewId!, arg_latLng!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapLongClickEvent$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapLongClickEvent was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapLongClickEvent was null, expected non-null int.',
          );
          final LatLngDto? arg_latLng = (args[1] as LatLngDto?);
          assert(
            arg_latLng != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMapLongClickEvent was null, expected non-null LatLngDto.',
          );
          try {
            api.onMapLongClickEvent(arg_viewId!, arg_latLng!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onRecenterButtonClicked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onRecenterButtonClicked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onRecenterButtonClicked was null, expected non-null int.',
          );
          try {
            api.onRecenterButtonClicked(arg_viewId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerEvent$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerEvent was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerEvent was null, expected non-null int.',
          );
          final String? arg_markerId = (args[1] as String?);
          assert(
            arg_markerId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerEvent was null, expected non-null String.',
          );
          final MarkerEventTypeDto? arg_eventType =
              (args[2] as MarkerEventTypeDto?);
          assert(
            arg_eventType != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerEvent was null, expected non-null MarkerEventTypeDto.',
          );
          try {
            api.onMarkerEvent(arg_viewId!, arg_markerId!, arg_eventType!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerDragEvent$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerDragEvent was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerDragEvent was null, expected non-null int.',
          );
          final String? arg_markerId = (args[1] as String?);
          assert(
            arg_markerId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerDragEvent was null, expected non-null String.',
          );
          final MarkerDragEventTypeDto? arg_eventType =
              (args[2] as MarkerDragEventTypeDto?);
          assert(
            arg_eventType != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerDragEvent was null, expected non-null MarkerDragEventTypeDto.',
          );
          final LatLngDto? arg_position = (args[3] as LatLngDto?);
          assert(
            arg_position != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMarkerDragEvent was null, expected non-null LatLngDto.',
          );
          try {
            api.onMarkerDragEvent(
              arg_viewId!,
              arg_markerId!,
              arg_eventType!,
              arg_position!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolygonClicked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolygonClicked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolygonClicked was null, expected non-null int.',
          );
          final String? arg_polygonId = (args[1] as String?);
          assert(
            arg_polygonId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolygonClicked was null, expected non-null String.',
          );
          try {
            api.onPolygonClicked(arg_viewId!, arg_polygonId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolylineClicked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolylineClicked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolylineClicked was null, expected non-null int.',
          );
          final String? arg_polylineId = (args[1] as String?);
          assert(
            arg_polylineId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onPolylineClicked was null, expected non-null String.',
          );
          try {
            api.onPolylineClicked(arg_viewId!, arg_polylineId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCircleClicked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCircleClicked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCircleClicked was null, expected non-null int.',
          );
          final String? arg_circleId = (args[1] as String?);
          assert(
            arg_circleId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCircleClicked was null, expected non-null String.',
          );
          try {
            api.onCircleClicked(arg_viewId!, arg_circleId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onNavigationUIEnabledChanged$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onNavigationUIEnabledChanged was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onNavigationUIEnabledChanged was null, expected non-null int.',
          );
          final bool? arg_navigationUIEnabled = (args[1] as bool?);
          assert(
            arg_navigationUIEnabled != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onNavigationUIEnabledChanged was null, expected non-null bool.',
          );
          try {
            api.onNavigationUIEnabledChanged(
              arg_viewId!,
              arg_navigationUIEnabled!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMyLocationClicked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMyLocationClicked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMyLocationClicked was null, expected non-null int.',
          );
          try {
            api.onMyLocationClicked(arg_viewId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMyLocationButtonClicked$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMyLocationButtonClicked was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onMyLocationButtonClicked was null, expected non-null int.',
          );
          try {
            api.onMyLocationButtonClicked(arg_viewId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCameraChanged$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCameraChanged was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_viewId = (args[0] as int?);
          assert(
            arg_viewId != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCameraChanged was null, expected non-null int.',
          );
          final CameraEventTypeDto? arg_eventType =
              (args[1] as CameraEventTypeDto?);
          assert(
            arg_eventType != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCameraChanged was null, expected non-null CameraEventTypeDto.',
          );
          final CameraPositionDto? arg_position =
              (args[2] as CameraPositionDto?);
          assert(
            arg_position != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.ViewEventApi.onCameraChanged was null, expected non-null CameraPositionDto.',
          );
          try {
            api.onCameraChanged(arg_viewId!, arg_eventType!, arg_position!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

class NavigationSessionApi {
  /// Constructor for [NavigationSessionApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NavigationSessionApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// General.
  Future<void> createNavigationSession(
    bool abnormalTerminationReportingEnabled,
    TaskRemovedBehaviorDto behavior,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.createNavigationSession$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[abnormalTerminationReportingEnabled, behavior],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isInitialized() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.isInitialized$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> cleanup() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.cleanup$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> showTermsAndConditionsDialog(
    String title,
    String companyName,
    bool shouldOnlyShowDriverAwarenessDisclaimer,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.showTermsAndConditionsDialog$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[title, companyName, shouldOnlyShowDriverAwarenessDisclaimer],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> areTermsAccepted() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.areTermsAccepted$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> resetTermsAccepted() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.resetTermsAccepted$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> getNavSDKVersion() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.getNavSDKVersion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  /// Navigation.
  Future<bool> isGuidanceRunning() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.isGuidanceRunning$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> startGuidance() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.startGuidance$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopGuidance() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.stopGuidance$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<RouteStatusDto> setDestinations(DestinationsDto destinations) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.setDestinations$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[destinations],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as RouteStatusDto?)!;
    }
  }

  Future<void> clearDestinations() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.clearDestinations$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NavigationWaypointDto?> continueToNextDestination() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.continueToNextDestination$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as NavigationWaypointDto?);
    }
  }

  Future<NavigationTimeAndDistanceDto> getCurrentTimeAndDistance() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.getCurrentTimeAndDistance$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NavigationTimeAndDistanceDto?)!;
    }
  }

  Future<void> setAudioGuidance(
    NavigationAudioGuidanceSettingsDto settings,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.setAudioGuidance$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[settings],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setSpeedAlertOptions(SpeedAlertOptionsDto options) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.setSpeedAlertOptions$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[options],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<RouteSegmentDto>> getRouteSegments() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.getRouteSegments$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!
          .cast<RouteSegmentDto>();
    }
  }

  Future<List<LatLngDto>> getTraveledRoute() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.getTraveledRoute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<LatLngDto>();
    }
  }

  Future<RouteSegmentDto?> getCurrentRouteSegment() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.getCurrentRouteSegment$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as RouteSegmentDto?);
    }
  }

  /// Simulation
  Future<void> setUserLocation(LatLngDto location) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.setUserLocation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[location],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeUserLocation() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.removeUserLocation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> simulateLocationsAlongExistingRoute() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.simulateLocationsAlongExistingRoute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> simulateLocationsAlongExistingRouteWithOptions(
    SimulationOptionsDto options,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.simulateLocationsAlongExistingRouteWithOptions$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[options],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<RouteStatusDto> simulateLocationsAlongNewRoute(
    List<NavigationWaypointDto> waypoints,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.simulateLocationsAlongNewRoute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[waypoints],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as RouteStatusDto?)!;
    }
  }

  Future<RouteStatusDto> simulateLocationsAlongNewRouteWithRoutingOptions(
    List<NavigationWaypointDto> waypoints,
    RoutingOptionsDto routingOptions,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.simulateLocationsAlongNewRouteWithRoutingOptions$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[waypoints, routingOptions],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as RouteStatusDto?)!;
    }
  }

  Future<RouteStatusDto>
  simulateLocationsAlongNewRouteWithRoutingAndSimulationOptions(
    List<NavigationWaypointDto> waypoints,
    RoutingOptionsDto routingOptions,
    SimulationOptionsDto simulationOptions,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.simulateLocationsAlongNewRouteWithRoutingAndSimulationOptions$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[waypoints, routingOptions, simulationOptions],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as RouteStatusDto?)!;
    }
  }

  Future<void> pauseSimulation() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.pauseSimulation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> resumeSimulation() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.resumeSimulation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Simulation (iOS only)
  Future<void> allowBackgroundLocationUpdates(bool allow) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.allowBackgroundLocationUpdates$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[allow],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Road snapped location updates.
  Future<void> enableRoadSnappedLocationUpdates() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.enableRoadSnappedLocationUpdates$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disableRoadSnappedLocationUpdates() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.disableRoadSnappedLocationUpdates$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Enable Turn-by-Turn navigation events.
  Future<void> enableTurnByTurnNavigationEvents(
    int? numNextStepsToPreview,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.enableTurnByTurnNavigationEvents$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[numNextStepsToPreview],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disableTurnByTurnNavigationEvents() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.disableTurnByTurnNavigationEvents$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> registerRemainingTimeOrDistanceChangedListener(
    int remainingTimeThresholdSeconds,
    int remainingDistanceThresholdMeters,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionApi.registerRemainingTimeOrDistanceChangedListener$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[
        remainingTimeThresholdSeconds,
        remainingDistanceThresholdMeters,
      ],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class NavigationSessionEventApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onSpeedingUpdated(SpeedingUpdatedEventDto msg);

  void onRoadSnappedLocationUpdated(LatLngDto location);

  void onRoadSnappedRawLocationUpdated(LatLngDto location);

  void onArrival(NavigationWaypointDto waypoint);

  void onRouteChanged();

  void onRemainingTimeOrDistanceChanged(
    double remainingTime,
    double remainingDistance,
  );

  /// Android-only event.
  void onTrafficUpdated();

  /// Android-only event.
  void onRerouting();

  /// Android-only event.
  void onGpsAvailabilityUpdate(bool available);

  /// Turn-by-Turn navigation events.
  void onNavInfo(NavInfoDto navInfo);

  static void setUp(
    NavigationSessionEventApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onSpeedingUpdated$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onSpeedingUpdated was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final SpeedingUpdatedEventDto? arg_msg =
              (args[0] as SpeedingUpdatedEventDto?);
          assert(
            arg_msg != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onSpeedingUpdated was null, expected non-null SpeedingUpdatedEventDto.',
          );
          try {
            api.onSpeedingUpdated(arg_msg!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRoadSnappedLocationUpdated$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRoadSnappedLocationUpdated was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final LatLngDto? arg_location = (args[0] as LatLngDto?);
          assert(
            arg_location != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRoadSnappedLocationUpdated was null, expected non-null LatLngDto.',
          );
          try {
            api.onRoadSnappedLocationUpdated(arg_location!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRoadSnappedRawLocationUpdated$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRoadSnappedRawLocationUpdated was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final LatLngDto? arg_location = (args[0] as LatLngDto?);
          assert(
            arg_location != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRoadSnappedRawLocationUpdated was null, expected non-null LatLngDto.',
          );
          try {
            api.onRoadSnappedRawLocationUpdated(arg_location!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onArrival$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onArrival was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final NavigationWaypointDto? arg_waypoint =
              (args[0] as NavigationWaypointDto?);
          assert(
            arg_waypoint != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onArrival was null, expected non-null NavigationWaypointDto.',
          );
          try {
            api.onArrival(arg_waypoint!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRouteChanged$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onRouteChanged();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRemainingTimeOrDistanceChanged$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRemainingTimeOrDistanceChanged was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_remainingTime = (args[0] as double?);
          assert(
            arg_remainingTime != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRemainingTimeOrDistanceChanged was null, expected non-null double.',
          );
          final double? arg_remainingDistance = (args[1] as double?);
          assert(
            arg_remainingDistance != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRemainingTimeOrDistanceChanged was null, expected non-null double.',
          );
          try {
            api.onRemainingTimeOrDistanceChanged(
              arg_remainingTime!,
              arg_remainingDistance!,
            );
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onTrafficUpdated$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onTrafficUpdated();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onRerouting$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            api.onRerouting();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onGpsAvailabilityUpdate$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onGpsAvailabilityUpdate was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_available = (args[0] as bool?);
          assert(
            arg_available != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onGpsAvailabilityUpdate was null, expected non-null bool.',
          );
          try {
            api.onGpsAvailabilityUpdate(arg_available!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onNavInfo$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onNavInfo was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final NavInfoDto? arg_navInfo = (args[0] as NavInfoDto?);
          assert(
            arg_navInfo != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.NavigationSessionEventApi.onNavInfo was null, expected non-null NavInfoDto.',
          );
          try {
            api.onNavInfo(arg_navInfo!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

class AutoMapViewApi {
  /// Constructor for [AutoMapViewApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AutoMapViewApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> isMyLocationEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isMyLocationEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setMyLocationEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setMyLocationEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<LatLngDto?> getMyLocation() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getMyLocation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as LatLngDto?);
    }
  }

  Future<MapTypeDto> getMapType() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getMapType$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MapTypeDto?)!;
    }
  }

  Future<void> setMapType(MapTypeDto mapType) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setMapType$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[mapType],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMapStyle(String styleJson) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setMapStyle$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[styleJson],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<CameraPositionDto> getCameraPosition() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getCameraPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as CameraPositionDto?)!;
    }
  }

  Future<LatLngBoundsDto> getVisibleRegion() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getVisibleRegion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as LatLngBoundsDto?)!;
    }
  }

  Future<void> followMyLocation(
    CameraPerspectiveDto perspective,
    double? zoomLevel,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.followMyLocation$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[perspective, zoomLevel],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> animateCameraToCameraPosition(
    CameraPositionDto cameraPosition,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.animateCameraToCameraPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[cameraPosition, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToLatLng(LatLngDto point, int? duration) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.animateCameraToLatLng$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[point, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToLatLngBounds(
    LatLngBoundsDto bounds,
    double padding,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.animateCameraToLatLngBounds$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[bounds, padding, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToLatLngZoom(
    LatLngDto point,
    double zoom,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.animateCameraToLatLngZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[point, zoom, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraByScroll(
    double scrollByDx,
    double scrollByDy,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.animateCameraByScroll$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[scrollByDx, scrollByDy, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraByZoom(
    double zoomBy,
    double? focusDx,
    double? focusDy,
    int? duration,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.animateCameraByZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[zoomBy, focusDx, focusDy, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> animateCameraToZoom(double zoom, int? duration) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.animateCameraToZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[zoom, duration],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> moveCameraToCameraPosition(
    CameraPositionDto cameraPosition,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.moveCameraToCameraPosition$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[cameraPosition],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToLatLng(LatLngDto point) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.moveCameraToLatLng$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[point],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToLatLngBounds(
    LatLngBoundsDto bounds,
    double padding,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.moveCameraToLatLngBounds$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[bounds, padding],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToLatLngZoom(LatLngDto point, double zoom) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.moveCameraToLatLngZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[point, zoom],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraByScroll(double scrollByDx, double scrollByDy) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.moveCameraByScroll$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[scrollByDx, scrollByDy],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraByZoom(
    double zoomBy,
    double? focusDx,
    double? focusDy,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.moveCameraByZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[zoomBy, focusDx, focusDy],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> moveCameraToZoom(double zoom) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.moveCameraToZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[zoom],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<double> getMinZoomPreference() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getMinZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as double?)!;
    }
  }

  Future<double> getMaxZoomPreference() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getMaxZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as double?)!;
    }
  }

  Future<void> resetMinMaxZoomPreference() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.resetMinMaxZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMinZoomPreference(double minZoomPreference) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setMinZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[minZoomPreference],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMaxZoomPreference(double maxZoomPreference) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setMaxZoomPreference$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[maxZoomPreference],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMyLocationButtonEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setMyLocationButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setConsumeMyLocationButtonClickEventsEnabled(
    bool enabled,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setConsumeMyLocationButtonClickEventsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setZoomGesturesEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setZoomGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setZoomControlsEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setZoomControlsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCompassEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setCompassEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRotateGesturesEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setRotateGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setScrollGesturesEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setScrollGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setScrollGesturesDuringRotateOrZoomEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setScrollGesturesDuringRotateOrZoomEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTiltGesturesEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setTiltGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMapToolbarEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setMapToolbarEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTrafficEnabled(bool enabled) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setTrafficEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[enabled],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isMyLocationButtonEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isMyLocationButtonEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isConsumeMyLocationButtonClickEventsEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isConsumeMyLocationButtonClickEventsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isZoomGesturesEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isZoomGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isZoomControlsEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isZoomControlsEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isCompassEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isCompassEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isRotateGesturesEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isRotateGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isScrollGesturesEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isScrollGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isScrollGesturesEnabledDuringRotateOrZoom() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isScrollGesturesEnabledDuringRotateOrZoom$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isTiltGesturesEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isTiltGesturesEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isMapToolbarEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isMapToolbarEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> isTrafficEnabled() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isTrafficEnabled$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<List<MarkerDto>> getMarkers() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MarkerDto>();
    }
  }

  Future<List<MarkerDto>> addMarkers(List<MarkerDto> markers) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.addMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[markers],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MarkerDto>();
    }
  }

  Future<List<MarkerDto>> updateMarkers(List<MarkerDto> markers) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.updateMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[markers],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<MarkerDto>();
    }
  }

  Future<void> removeMarkers(List<MarkerDto> markers) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.removeMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[markers],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearMarkers() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.clearMarkers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clear() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.clear$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PolygonDto>> getPolygons() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getPolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolygonDto>();
    }
  }

  Future<List<PolygonDto>> addPolygons(List<PolygonDto> polygons) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.addPolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[polygons],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolygonDto>();
    }
  }

  Future<List<PolygonDto>> updatePolygons(List<PolygonDto> polygons) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.updatePolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[polygons],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolygonDto>();
    }
  }

  Future<void> removePolygons(List<PolygonDto> polygons) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.removePolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[polygons],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearPolygons() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.clearPolygons$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PolylineDto>> getPolylines() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getPolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolylineDto>();
    }
  }

  Future<List<PolylineDto>> addPolylines(List<PolylineDto> polylines) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.addPolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[polylines],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolylineDto>();
    }
  }

  Future<List<PolylineDto>> updatePolylines(List<PolylineDto> polylines) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.updatePolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[polylines],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<PolylineDto>();
    }
  }

  Future<void> removePolylines(List<PolylineDto> polylines) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.removePolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[polylines],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearPolylines() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.clearPolylines$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<CircleDto>> getCircles() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<CircleDto>();
    }
  }

  Future<List<CircleDto>> addCircles(List<CircleDto> circles) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.addCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[circles],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<CircleDto>();
    }
  }

  Future<List<CircleDto>> updateCircles(List<CircleDto> circles) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.updateCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[circles],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<CircleDto>();
    }
  }

  Future<void> removeCircles(List<CircleDto> circles) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.removeCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[circles],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearCircles() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.clearCircles$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enableOnCameraChangedEvents() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.enableOnCameraChangedEvents$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isAutoScreenAvailable() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.isAutoScreenAvailable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setPadding(MapPaddingDto padding) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.setPadding$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[padding],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MapPaddingDto> getPadding() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.AutoMapViewApi.getPadding$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as MapPaddingDto?)!;
    }
  }
}

abstract class AutoViewEventApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onCustomNavigationAutoEvent(String event, Object data);

  void onAutoScreenAvailabilityChanged(bool isAvailable);

  static void setUp(
    AutoViewEventApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.AutoViewEventApi.onCustomNavigationAutoEvent$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.AutoViewEventApi.onCustomNavigationAutoEvent was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_event = (args[0] as String?);
          assert(
            arg_event != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.AutoViewEventApi.onCustomNavigationAutoEvent was null, expected non-null String.',
          );
          final Object? arg_data = (args[1] as Object?);
          assert(
            arg_data != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.AutoViewEventApi.onCustomNavigationAutoEvent was null, expected non-null Object.',
          );
          try {
            api.onCustomNavigationAutoEvent(arg_event!, arg_data!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_navigation_flutter.AutoViewEventApi.onAutoScreenAvailabilityChanged$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.AutoViewEventApi.onAutoScreenAvailabilityChanged was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_isAvailable = (args[0] as bool?);
          assert(
            arg_isAvailable != null,
            'Argument for dev.flutter.pigeon.google_navigation_flutter.AutoViewEventApi.onAutoScreenAvailabilityChanged was null, expected non-null bool.',
          );
          try {
            api.onAutoScreenAvailabilityChanged(arg_isAvailable!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

class NavigationInspector {
  /// Constructor for [NavigationInspector].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NavigationInspector({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<bool> isViewAttachedToSession(int viewId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_navigation_flutter.NavigationInspector.isViewAttachedToSession$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[viewId],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }
}
